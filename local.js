// Generated by CoffeeScript 1.4.0
(function() {
  var BUF_SIZE, KEY, METHOD, PORT, REMOTE_PORT, SERVER, config, getServer, inetAton, inetNtoa, socket, string2ArrayBuffer, timeout;

  inetNtoa = function(buf) {
    return buf[0] + "." + buf[1] + "." + buf[2] + "." + buf[3];
  };

  inetAton = function(ipStr) {
    var buf, i, parts;
    parts = ipStr.split(".");
    if (parts.length !== 4) {
      return null;
    } else {
      buf = new Buffer(4);
      i = 0;
      while (i < 4) {
        buf[i] = +parts[i];
        i++;
      }
      return buf;
    }
  };

  config = {
    local_port: 1081,
    server_port: 8388,
    password: 'barfoo!',
    server: '127.0.0.1',
    method: null
  };

  SERVER = config.server;

  REMOTE_PORT = config.server_port;

  PORT = config.local_port;

  KEY = config.password;

  METHOD = config.method;

  timeout = Math.floor(config.timeout * 1000);

  BUF_SIZE = 1500;

  getServer = function() {
    if (SERVER instanceof Array) {
      return SERVER[Math.floor(Math.random() * SERVER.length)];
    } else {
      return SERVER;
    }
  };

  string2ArrayBuffer = function(string) {
    var arr, buf, i, _i, _ref;
    buf = new ArrayBuffer(string.length);
    arr = new Uint8Array(buf, 0, string.length);
    for (i = _i = 0, _ref = string.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      arr[i] = string.charCodeAt(i);
    }
    return buf;
  };

  socket = chrome.socket;

  socket.create('tcp', {}, function(socketInfo) {
    var address, listen, port;
    listen = socketInfo.socketId;
    address = '0.0.0.0';
    port = PORT;
    chrome.runtime.onSuspend.addListener(function() {
      return chrome.socket.destroy(listen);
    });
    return socket.listen(listen, address, port, function(result) {
      console.assert(0 === result);
      return socket.getInfo(listen, function(info) {
        var accept;
        console.log('server listening on http://localhost:' + info.localPort);
        accept = function(acceptInfo) {
          var encryptor, local;
          console.assert(acceptInfo.resultCode === 0);
          socket.accept(listen, accept);
          local = acceptInfo.socketId;
          encryptor = new Encryptor(KEY, METHOD);
          return chrome.socket.create('tcp', {}, function(socketInfo) {
            var remote;
            remote = socketInfo.socketId;
            return chrome.socket.connect(remote, SERVER, REMOTE_PORT, function(result) {
              console.assert(0 === result);
              return chrome.socket.read(local, 256, function(readInfo) {
                console.assert(readInfo.resultCode > 0);
                return chrome.socket.write(local, string2ArrayBuffer('\x05\x00'), function(readInfo) {
                  console.assert(readInfo.bytesWritten === 2);
                  console.log(readInfo);
                  return chrome.socket.read(local, 3, function(readInfo) {
                    console.assert(readInfo.resultCode > 0);
                    console.log(readInfo);
                    return chrome.socket.write(local, string2ArrayBuffer('\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00'), function(readInfo) {
                      var localToRemote, remoteToLocal;
                      console.assert(readInfo.bytesWritten === 10);
                      localToRemote = function(readInfo) {
                        var data;
                        console.assert(readInfo.resultCode > 0);
                        if (readInfo.resultCode <= 0) {
                          return;
                        }
                        data = readInfo.data;
                        console.log(readInfo);
                        data = encryptor.encrypt(data);
                        return chrome.socket.write(remote, data, function(readInfo) {
                          console.assert(readInfo.bytesWritten > 0);
                          return chrome.socket.read(local, BUF_SIZE, localToRemote);
                        });
                      };
                      remoteToLocal = function(readInfo) {
                        var data;
                        console.assert(readInfo.resultCode > 0);
                        if (readInfo.resultCode <= 0) {
                          return;
                        }
                        data = readInfo.data;
                        console.log(readInfo);
                        data = encryptor.decrypt(data);
                        return chrome.socket.write(local, data, function(readInfo) {
                          console.assert(readInfo.bytesWritten > 0);
                          return chrome.socket.read(remote, BUF_SIZE, remoteToLocal);
                        });
                      };
                      chrome.socket.read(local, BUF_SIZE, localToRemote);
                      return chrome.socket.read(remote, BUF_SIZE, remoteToLocal);
                    });
                  });
                });
              });
            });
          });
        };
        return socket.accept(listen, accept);
      });
    });
  });

}).call(this);
