// Generated by CoffeeScript 1.7.1
(function() {
  var Local, tcp, tcpServer;

  tcpServer = chrome.sockets.tcpServer;

  tcp = chrome.sockets.tcp;

  Local = (function() {
    function Local(config) {
      var BUF_SIZE, KEY, METHOD, PORT, REMOTE_PORT, SERVER, string2ArrayBuffer, that;
      SERVER = config.server;
      REMOTE_PORT = +config.server_port;
      PORT = +config.local_port;
      KEY = config.password;
      METHOD = config.method;
      BUF_SIZE = 1500;
      that = this;
      string2ArrayBuffer = function(string) {
        var arr, buf, i, _i, _ref;
        buf = new ArrayBuffer(string.length);
        arr = new Uint8Array(buf, 0, string.length);
        for (i = _i = 0, _ref = string.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          arr[i] = string.charCodeAt(i);
        }
        return buf;
      };
      tcpServer.create({}, function(socketInfo) {
        var address, listen, port;
        that.listen = socketInfo.socketId;
        listen = that.listen;
        console.log("listen: " + listen);
        address = '0.0.0.0';
        port = PORT;
        chrome.runtime.onSuspend.addListener(function() {
          console.log('closing listen socket');
          return chrome.socket.destroy(listen);
        });
        return tcpServer.listen(listen, address, port, function(result) {
          console.log('listen');
          console.assert(0 === result);
          return tcpServer.getInfo(listen, function(info) {
            var accept;
            console.log('server listening on http://localhost:' + info.localPort);
            accept = function(acceptInfo) {
              var encryptor, local;
              if (acceptInfo.resultCode !== 0) {
                return;
              }
              console.assert(acceptInfo.resultCode === 0);
              tcpServer.accept(listen, accept);
              console.log('socket.accept');
              local = acceptInfo.socketId;
              console.log("accept " + local);
              encryptor = new Encryptor(KEY, METHOD);
              return tcp.create({}, function(socketInfo) {
                var remote;
                remote = socketInfo.socketId;
                return tcp.connect(remote, SERVER, REMOTE_PORT, function(result) {
                  console.log("connect " + remote);
                  if (result !== 0) {
                    console.log("destroy " + local + " " + remote);
                    tcp.destroy(local);
                    tcp.destroy(remote);
                    return;
                  }
                  console.assert(0 === result);
                  return tcp.read(local, 256, function(readInfo) {
                    console.assert(readInfo.resultCode > 0);
                    return tcp.write(local, string2ArrayBuffer('\x05\x00'), function(readInfo) {
                      console.assert(readInfo.bytesWritten === 2);
                      return tcp.read(local, 3, function(readInfo) {
                        console.assert(readInfo.resultCode > 0);
                        return tcp.write(local, string2ArrayBuffer('\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00'), function(readInfo) {
                          var localToRemote, remoteToLocal;
                          console.assert(readInfo.bytesWritten === 10);
                          localToRemote = function(readInfo) {
                            var data;
                            if (readInfo.resultCode <= 0) {
                              console.log("destroy " + local + " " + remote);
                              tcp.destroy(local);
                              tcp.destroy(remote);
                              return;
                            }
                            console.assert(readInfo.resultCode > 0);
                            data = readInfo.data;
                            data = encryptor.encrypt(data);
                            return tcp.write(remote, data, function(readInfo) {
                              if (readInfo.bytesWritten <= 0) {
                                console.log("destroy " + local + " " + remote);
                                tcp.destroy(local);
                                tcp.destroy(remote);
                                return;
                              }
                              console.assert(readInfo.bytesWritten === data.byteLength);
                              return tcp.read(local, BUF_SIZE, localToRemote);
                            });
                          };
                          remoteToLocal = function(readInfo) {
                            var data;
                            if (readInfo.resultCode <= 0) {
                              console.log("destroy " + local + " " + remote);
                              tcp.destroy(remote);
                              tcp.destroy(local);
                              return;
                            }
                            console.assert(readInfo.resultCode > 0);
                            data = readInfo.data;
                            data = encryptor.decrypt(data);
                            return tcp.write(local, data, function(readInfo) {
                              if (readInfo.bytesWritten <= 0) {
                                console.log("destroy " + local + " " + remote);
                                tcp.destroy(local);
                                tcp.destroy(remote);
                                return;
                              }
                              console.assert(readInfo.bytesWritten === data.byteLength);
                              return tcp.read(remote, BUF_SIZE, remoteToLocal);
                            });
                          };
                          tcp.read(local, BUF_SIZE, localToRemote);
                          return tcp.read(remote, BUF_SIZE, remoteToLocal);
                        });
                      });
                    });
                  });
                });
              });
            };
            return tcpServer.accept(listen, accept);
          });
        });
      });
    }

    Local.prototype.close = function() {
      console.log(this.listen);
      if (this.listen) {
        return tcpServer.destroy(this.listen);
      }
    };

    return Local;

  })();

  window.Local = Local;

}).call(this);
