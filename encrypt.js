// Generated by CoffeeScript 1.4.0
(function() {
  var Encryptor, cachedTables, encrypt, int32Max;

  int32Max = Math.pow(2, 32);

  cachedTables = {};

  window.getTable = function(key) {
    var ah, al, decrypt_table, i, md5sum, md5sum_array, md5sum_str, result, table, _i;
    if (cachedTables[key]) {
      return cachedTables[key];
    }
    console.log("calculating ciphers");
    table = new Array(256);
    decrypt_table = new Array(256);
    md5sum_str = rstr_md5(key);
    md5sum = new ArrayBuffer(8);
    md5sum_array = new Uint8Array(md5sum, 0, 8);
    for (i = _i = 0; _i <= 7; i = ++_i) {
      md5sum_array[i] = md5sum_str.charCodeAt(i);
    }
    al = new Uint32Array(md5sum, 0, 1)[0];
    ah = new Uint32Array(md5sum, 4, 1)[0];
    i = 0;
    while (i < 256) {
      table[i] = i;
      i++;
    }
    i = 1;
    while (i < 1024) {
      table = merge_sort(table, function(x, y) {
        return ((ah % (x + i)) * int32Max + al) % (x + i) - ((ah % (y + i)) * int32Max + al) % (y + i);
      });
      i++;
    }
    i = 0;
    while (i < 256) {
      decrypt_table[table[i]] = i;
      ++i;
    }
    result = [table, decrypt_table];
    cachedTables[key] = result;
    return result;
  };

  encrypt = function(table, buf) {
    var array, i;
    i = 0;
    console.log(buf);
    array = new Uint8Array(buf);
    console.log(array);
    while (i < array.length) {
      array[i] = table[array[i]];
      i++;
    }
    console.log(array);
    return buf;
  };

  Encryptor = (function() {

    function Encryptor(key, method) {
      var _ref;
      this.method = method;
      if (this.method != null) {
        this.cipher = crypto.createCipher(this.method, key);
        this.decipher = crypto.createDecipher(this.method, key);
      } else {
        _ref = getTable(key), this.encryptTable = _ref[0], this.decryptTable = _ref[1];
      }
    }

    Encryptor.prototype.encrypt = function(buf) {
      var result;
      if (this.method != null) {
        result = new Buffer(this.cipher.update(buf.toString('binary')), 'binary');
        return result;
      } else {
        return encrypt(this.encryptTable, buf);
      }
    };

    Encryptor.prototype.decrypt = function(buf) {
      var result;
      if (this.method != null) {
        result = new Buffer(this.decipher.update(buf.toString('binary')), 'binary');
        return result;
      } else {
        return encrypt(this.decryptTable, buf);
      }
    };

    return Encryptor;

  })();

  window.Encryptor = Encryptor;

}).call(this);
